<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LZ&#39;s Blog</title>
  
  <subtitle>日拱一卒，功不唐捐</subtitle>
  <link href="https://lizheng487.github.io/atom.xml" rel="self"/>
  
  <link href="https://lizheng487.github.io/"/>
  <updated>2025-07-08T07:16:30.398Z</updated>
  <id>https://lizheng487.github.io/</id>
  
  <author>
    <name>Li Zheng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自定义懒加载指令+三种滚动加载效果</title>
    <link href="https://lizheng487.github.io/2025/07/08/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%87%92%E5%8A%A0%E8%BD%BD%E6%8C%87%E4%BB%A4-%E4%B8%89%E7%A7%8D%E6%BB%9A%E5%8A%A8%E5%8A%A0%E8%BD%BD%E6%95%88%E6%9E%9C/"/>
    <id>https://lizheng487.github.io/2025/07/08/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%87%92%E5%8A%A0%E8%BD%BD%E6%8C%87%E4%BB%A4-%E4%B8%89%E7%A7%8D%E6%BB%9A%E5%8A%A8%E5%8A%A0%E8%BD%BD%E6%95%88%E6%9E%9C/</id>
    <published>2025-07-08T06:39:44.000Z</published>
    <updated>2025-07-08T07:16:30.398Z</updated>
    
    <content type="html"><![CDATA[<ul><li>传统 scroll 事件</li><li>scroll 事件 + 节流 + requestAnimationFrame 优化</li><li>IntersectionObserver 观察者模式</li><li>自定义懒加载指令</li></ul><span id="more"></span><h2 id="三种滚动加载效果"><a href="#三种滚动加载效果" class="headerlink" title="三种滚动加载效果"></a>三种滚动加载效果</h2><h3 id="传统-scroll-事件"><a href="#传统-scroll-事件" class="headerlink" title="传统 scroll 事件"></a>传统 scroll 事件</h3><ul><li>原理：监听页面滚动事件，分析 clientHeight,scrollTop,scrollHeight 关系</li><li><ol><li>scrollTop – 滚动条距离顶部的高度</li></ol></li><li><ol start="2"><li>scrollHeight – 当前页面的总高度(body 总高度)</li></ol></li><li><ol start="3"><li>clientHeight – 当前可视的页面高度(设备窗口的高度)</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;scroll&quot;</span>,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 获取视口的高度。window.innerHeight || Math.min(document.documentElement.clientHeight, document.body.clientHeight);</span></span><br><span class="line">    <span class="keyword">const</span> clientHeight = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>;</span><br><span class="line">    <span class="comment">// 获取滚动条的垂直位置。window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop;</span></span><br><span class="line">    <span class="keyword">const</span> scrollTop = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>;</span><br><span class="line">    <span class="comment">// 获取文档的总高度。Math.max(document.documentElement.scrollHeight, document.body.scrollHeight);</span></span><br><span class="line">    <span class="keyword">const</span> scrollHeight = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollHeight</span>;</span><br><span class="line">    <span class="comment">// 检查是否滚动到底部</span></span><br><span class="line">    <span class="keyword">if</span> (clientHeight + scrollTop &gt;= scrollHeight) &#123;</span><br><span class="line">      <span class="comment">// 监测到滚动到底部，进行后续操作</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="scroll-事件-节流-requestAnimationFrame-优化"><a href="#scroll-事件-节流-requestAnimationFrame-优化" class="headerlink" title="scroll 事件 + 节流 + requestAnimationFrame 优化"></a>scroll 事件 + 节流 + requestAnimationFrame 优化</h3><ul><li>在传统的滚动监听中，每次滚动都会触发 scroll 事件，可能会导致性能问题。为了解决这个问题，我们可以使用节流（throttle）来限制触发频率。</li><li>使用 requestAnimationFrame 浏览器会自动优化动画，从而提高性能。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isScrolling = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;scroll&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!isScrolling) &#123;</span><br><span class="line">    isScrolling = <span class="literal">true</span>;</span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> clientHeight = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>;</span><br><span class="line">      <span class="keyword">const</span> scrollTop = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>;</span><br><span class="line">      <span class="keyword">const</span> scrollHeight = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollHeight</span>;</span><br><span class="line">      <span class="keyword">if</span> (clientHeight + scrollTop &gt;= scrollHeight) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;滚动到底部了，可以加载更多内容&quot;</span>);</span><br><span class="line">        <span class="comment">// 在这里调用加载更多内容的函数</span></span><br><span class="line">      &#125;</span><br><span class="line">      isScrolling = <span class="literal">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="IntersectionObserver-观察者模式"><a href="#IntersectionObserver-观察者模式" class="headerlink" title="IntersectionObserver 观察者模式"></a>IntersectionObserver 观察者模式</h3><ul><li>IntersectionObserver 是一种用于监听元素是否进入或离开可视区域的 API，它可以实现懒加载。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleIntersection</span>(<span class="params">entries, observer</span>) &#123;</span><br><span class="line">  entries.<span class="title function_">forEach</span>(<span class="function">(<span class="params">entry</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (entry.<span class="property">isIntersecting</span>) &#123;</span><br><span class="line">      <span class="title function_">loadMoreData</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">newData</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;loadMoreData:&quot;</span>, newData);</span><br><span class="line">        <span class="comment">// 重新观察加载提示</span></span><br><span class="line">        observer.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;loader&quot;</span>));</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(handleIntersection, &#123;</span><br><span class="line">  <span class="attr">threshold</span>: <span class="number">0.1</span>, <span class="comment">// 当加载提示进入视口 10% 时触发</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始观察加载提示</span></span><br><span class="line">observer.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;loader&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="自定义懒加载指令"><a href="#自定义懒加载指令" class="headerlink" title="自定义懒加载指令"></a>自定义懒加载指令</h2><p>定义了一个自定义指令 v-lazy，用于懒加载图片。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义指令，懒加载</span></span><br><span class="line">app.<span class="title function_">directive</span>(<span class="string">&quot;lazy&quot;</span>, &#123;</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> observe = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(</span><br><span class="line">      <span class="function">(<span class="params">[&#123; isIntersecting &#125;]</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isIntersecting) &#123;</span><br><span class="line">          observe.<span class="title function_">unobserve</span>(el);</span><br><span class="line">          el.<span class="property">onerror</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            el.<span class="property">src</span> = defaultImg;</span><br><span class="line">          &#125;;</span><br><span class="line">          el.<span class="property">src</span> = binding.<span class="property">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">threshold</span>: <span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">    observe.<span class="title function_">observe</span>(el);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;传统 scroll 事件&lt;/li&gt;
&lt;li&gt;scroll 事件 + 节流 + requestAnimationFrame 优化&lt;/li&gt;
&lt;li&gt;IntersectionObserver 观察者模式&lt;/li&gt;
&lt;li&gt;自定义懒加载指令&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>URL路径解析</title>
    <link href="https://lizheng487.github.io/2025/07/08/URL%E8%B7%AF%E5%BE%84%E8%A7%A3%E6%9E%90/"/>
    <id>https://lizheng487.github.io/2025/07/08/URL%E8%B7%AF%E5%BE%84%E8%A7%A3%E6%9E%90/</id>
    <published>2025-07-08T05:52:38.000Z</published>
    <updated>2025-07-08T07:15:38.506Z</updated>
    
    <content type="html"><![CDATA[<p>解析 URL 参数为对象 parseParam</p><span id="more"></span><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><ul><li>使用<code>new URL()</code>或者<code>window.location.hash</code>获取到 URL 对象。</li><li><code>new URLSearchParams()</code> 创建一个参数对象。</li><li>最后使用 <code>for...of</code> 循环遍历参数对象，将参数名和参数值组成对象并返回。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="核心逻辑"><a href="#核心逻辑" class="headerlink" title="核心逻辑"></a>核心逻辑</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">parseParam</span> = (<span class="params">url</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> urlObj = <span class="keyword">new</span> <span class="title function_">URL</span>(url);</span><br><span class="line">  <span class="keyword">const</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(urlObj.<span class="property">search</span>);</span><br><span class="line">  <span class="keyword">const</span> paramObj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> params) &#123;</span><br><span class="line">    paramObj[key] = value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> paramObj;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">parseParam</span>(<span class="string">&quot;https://www.example.com?name=John&amp;age=30&quot;</span>);</span><br><span class="line"><span class="comment">// 输出：&#123; name: &#x27;John&#x27;, age: &#x27;30&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>对代码进行优化，优化只有一个参数的情况、添加判断条件、数字类型判断。</p><h3 id="优化完整代码"><a href="#优化完整代码" class="headerlink" title="优化完整代码"></a>优化完整代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">url</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">parseParam</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> urlObj = <span class="keyword">new</span> <span class="title function_">URL</span>(url);</span><br><span class="line">  <span class="keyword">const</span> queryParams = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(urlObj.<span class="property">search</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> paramsObj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> queryParams.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">      paramsObj[key] = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> val = <span class="built_in">decodeURIComponent</span>(value);</span><br><span class="line">      val = <span class="regexp">/^\d+$/</span>.<span class="title function_">test</span>(val) ? <span class="built_in">parseFloat</span>(val) : val;</span><br><span class="line">      <span class="keyword">if</span> (paramsObj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">        paramsObj[key] = [].<span class="title function_">concat</span>(paramsObj[key], val);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        paramsObj[key] = val;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> paramsObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;解析 URL 参数为对象 parseParam&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://lizheng487.github.io/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://lizheng487.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>打字机效果实现</title>
    <link href="https://lizheng487.github.io/2025/07/03/%E6%89%93%E5%AD%97%E6%9C%BA%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/"/>
    <id>https://lizheng487.github.io/2025/07/03/%E6%89%93%E5%AD%97%E6%9C%BA%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/</id>
    <published>2025-07-03T01:35:28.000Z</published>
    <updated>2025-07-08T07:15:42.361Z</updated>
    
    <content type="html"><![CDATA[<p>打字机效果是一种常见的网页动画效果，通常用于在页面上逐字显示文字内容，模拟真实的打字过程。本文将实现一个简单的打字机效果。</p><span id="more"></span><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><ul><li>定义一个 <code>initTypewriter()</code> 方法，用于初始化打字机效果。</li><li><code>querySelector(&#39;.description&#39;)</code> 获取整个描述框；</li><li>初始设置为透明 <code>(opacity: 0 )</code>，然后通过 <code>setTimeout</code> 延迟显示；</li><li>使用 <code>.desc-item</code> 容器包裹每一行文字；</li><li>对每个 <code>.desc-item</code> 内容进行逐字拼接，并通过递归调用 <code>typewriter()</code> 函数实现逐字显示；</li><li><code>.desc</code> 表示实际显示的文字内容；</li><li>当所有字符显示完毕后，隐藏光标 <code>.cursor</code>。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="JavaScript-逻辑"><a href="#JavaScript-逻辑" class="headerlink" title="JavaScript 逻辑"></a>JavaScript 逻辑</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">initTypewriter</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> descBox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.description&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (descBox) &#123;</span><br><span class="line">      descBox.<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&#x27;0&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        descBox.<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        <span class="keyword">const</span> descItemList = descBox.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.desc-item&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        descItemList.<span class="title function_">forEach</span>(<span class="function"><span class="params">descItem</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> desc = descItem.<span class="title function_">querySelector</span>(<span class="string">&#x27;.desc&#x27;</span>)</span><br><span class="line">          <span class="keyword">const</span> cursor = descItem.<span class="title function_">querySelector</span>(<span class="string">&#x27;.cursor&#x27;</span>)</span><br><span class="line">          <span class="keyword">const</span> text = desc.<span class="property">innerHTML</span></span><br><span class="line"></span><br><span class="line">          desc.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">          <span class="keyword">let</span> charIndex = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">const</span> <span class="title function_">typewriter</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (charIndex &lt; text.<span class="property">length</span>) &#123;</span><br><span class="line">              desc.<span class="property">textContent</span> += text[charIndex]</span><br><span class="line">              charIndex++</span><br><span class="line">              <span class="built_in">setTimeout</span>(typewriter, <span class="number">100</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              cursor.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (text) <span class="title function_">typewriter</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;, <span class="number">300</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">initTypewriter</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="HTML-结构"><a href="#HTML-结构" class="headerlink" title="HTML 结构"></a>HTML 结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;description&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;desc-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span>打印机打字效果展示~~~<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;cursor&quot;</span>&gt;</span>｜<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;desc-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span>学习新思想，争做新青年！<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;cursor&quot;</span>&gt;</span>｜<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="可选-CSS-样式（增强视觉效果）"><a href="#可选-CSS-样式（增强视觉效果）" class="headerlink" title="可选 CSS 样式（增强视觉效果）"></a>可选 CSS 样式（增强视觉效果）</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.description</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.desc-item</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;打字机效果是一种常见的网页动画效果，通常用于在页面上逐字显示文字内容，模拟真实的打字过程。本文将实现一个简单的打字机效果。&lt;/p&gt;</summary>
    
    
    
    <category term="前端展示" scheme="https://lizheng487.github.io/categories/%E5%89%8D%E7%AB%AF%E5%B1%95%E7%A4%BA/"/>
    
    
    <category term="娱乐" scheme="https://lizheng487.github.io/tags/%E5%A8%B1%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>第二篇文章</title>
    <link href="https://lizheng487.github.io/2025/07/01/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>https://lizheng487.github.io/2025/07/01/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/</id>
    <published>2025-07-01T08:59:05.000Z</published>
    <updated>2025-07-01T09:00:50.405Z</updated>
    
    <content type="html"><![CDATA[<p>大家好，我是lizheng</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;大家好，我是lizheng&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="生活" scheme="https://lizheng487.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="自己" scheme="https://lizheng487.github.io/tags/%E8%87%AA%E5%B7%B1/"/>
    
  </entry>
  
  <entry>
    <title>文章1</title>
    <link href="https://lizheng487.github.io/2025/07/01/%E6%96%87%E7%AB%A01/"/>
    <id>https://lizheng487.github.io/2025/07/01/%E6%96%87%E7%AB%A01/</id>
    <published>2025-07-01T07:37:23.000Z</published>
    <updated>2025-07-01T07:38:12.030Z</updated>
    
    <content type="html"><![CDATA[<p>这是我的第一篇博客文章。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是我的第一篇博客文章。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="技术" scheme="https://lizheng487.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="博客" scheme="https://lizheng487.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="测试" scheme="https://lizheng487.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lizheng487.github.io/2025/07/01/hello-world/"/>
    <id>https://lizheng487.github.io/2025/07/01/hello-world/</id>
    <published>2025-07-01T07:10:56.433Z</published>
    <updated>2025-07-01T07:09:55.358Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a class=&quot;link&quot;   href=&quot;https://hexo.io/&quot; &gt;Hexo&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;! This is your very first post. Che</summary>
      
    
    
    
    
  </entry>
  
</feed>
